enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_fs.edl" import *;
    from "sgx_net.edl" import *;
    from "sgx_time.edl" import *;
    include "sgx_quote.h"
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tprotected_fs.edl" import *;

    from "sgx_env.edl" import u_getenv_ocall, u_setenv_ocall;

    // This header is generated during the build of enclave-ffi-types
    include "enclave-ffi-types.h"

    trusted {
        EnclaveBuffer ecall_allocate(
            [in, count=length] const uint8_t* buffer,
            uintptr_t length
        );

        public sgx_status_t ecall_configure_runtime(
            RuntimeConfiguration runtime_configuration
        );

        public InitResult ecall_init(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len,
            [in, count=sig_info_len] const uint8_t* sig_info,
            uintptr_t sig_info_len
        );

        public HandleResult ecall_handle(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len,
            [in, count=sig_info_len] const uint8_t* sig_info,
            uintptr_t sig_info_len
        );

        public QueryResult ecall_query(
            Ctx context,
            uint64_t gas_limit,
            [out] uint64_t* used_gas,
            [in, count=contract_len] const uint8_t* contract,
            uintptr_t contract_len,
            [in, count=env_len] const uint8_t* env,
            uintptr_t env_len,
            [in, count=msg_len] const uint8_t* msg,
            uintptr_t msg_len
        );

        public HealthCheckResult ecall_health_check();

        public uint32_t ecall_run_tests();
    };

    untrusted {
        UserSpaceBuffer ocall_allocate(
            [in, count=length] const uint8_t* buffer,
            uintptr_t length
        );

        OcallReturn ocall_read_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [out] EnclaveBuffer* value,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len
        ) allow (ecall_allocate);

        OcallReturn ocall_query_chain(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            uint64_t gas_limit,
            [out] EnclaveBuffer* value,
            [in, count=query_len] const uint8_t* query,
            uintptr_t query_len
        ) allow (ecall_allocate, ecall_query);

        OcallReturn ocall_remove_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len
        );

        OcallReturn ocall_write_db(
            Ctx context,
            [out] UntrustedVmError* vm_error,
            [out] uint64_t* gas_used,
            [in, count=key_len] const uint8_t* key,
            uintptr_t key_len,
            [in, count=value_len] const uint8_t* value,
            uintptr_t value_len
        );
    };
};
