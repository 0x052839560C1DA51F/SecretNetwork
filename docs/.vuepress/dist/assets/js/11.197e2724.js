(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{358:function(a,s,e){"use strict";e.r(s);var t=e(43),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"install"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#install"}},[a._v("#")]),a._v(" Install")]),a._v(" "),e("p",[e("strong",[a._v("Requirement")]),a._v(": Go version needs to be "),e("a",{attrs:{href:"https://golang.org/dl/",target:"_blank",rel:"noopener noreferrer"}},[a._v("1.13 or higher"),e("OutboundLink")],1),a._v(".")]),a._v(" "),e("h1",{attrs:{id:"developers-quick-start"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#developers-quick-start"}},[a._v("#")]),a._v(" Developers Quick Start")]),a._v(" "),e("h2",{attrs:{id:"local-installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#local-installation"}},[a._v("#")]),a._v(" Local installation")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/enigmampc/SecretNetwork\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" SecretNetwork\ngo mod tidy\n"),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# installs enigmad and enigmacli")]),a._v("\n")])])]),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli config chain-id enigma-testnet "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# now we won't need to type --chain-id enigma-testnet every time")]),a._v("\nenigmacli config output json\nenigmacli config indent "),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v("\nenigmacli config trust-node "),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# true if you trust the full-node you are connecting to, false otherwise")]),a._v("\n\nenigmad init banana --chain-id enigma-testnet "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# banana==moniker==user-agent of this node")]),a._v("\nperl -i -pe "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'s/"stake"/"uscrt"/g\'')]),a._v(" ~/.enigmad/config/genesis.json "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# change the default staking denom from stake to uscrt")]),a._v("\n\nenigmacli keys "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" a\nenigmacli keys "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" b\n\nenigmad add-genesis-account "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmacli keys show -a a"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" 1000000000000uscrt "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1 SCRT == 10^6 uSCRT")]),a._v("\nenigmad add-genesis-account "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmacli keys show -a b"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" 2000000000000uscrt "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1 SCRT == 10^6 uSCRT")]),a._v("\n\nenigmad validate-genesis "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# make sure genesis file is correct")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# `enigmad export` to send genesis.json to validators")]),a._v("\n\nenigmad gentx --name a --amount 1000000uscrt "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# generate a genesis transaction - this makes a a validator on genesis which stakes 1000000uscrt (1 SCRT)")]),a._v("\n\nenigmad collect-gentxs "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# input the genTx into the genesis file, so that the chain is aware of the validators")]),a._v("\n\nenigmad validate-genesis "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# make sure genesis file is correct")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# `enigmad export` to send genesis.json to validators")]),a._v("\n\nenigmad start --pruning nothing "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# starts a node")]),a._v("\n")])])]),e("h2",{attrs:{id:"docker-installation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-installation"}},[a._v("#")]),a._v(" Docker installation")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" clone https://github.com/enigmampc/SecretNetwork\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" SecretNetwork\ndocker build -t enigmadev -f Dockerfile_devnet "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n\ndocker run -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("26657")]),a._v(":26657 -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("26656")]),a._v(":26656 -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1317")]),a._v(":1317 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n --name enigmadev enigmadev\n")])])]),e("h1",{attrs:{id:"delegation-rewards"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delegation-rewards"}},[a._v("#")]),a._v(" Delegation & Rewards")]),a._v(" "),e("h2",{attrs:{id:"b-is-a-delegator-of-a"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-is-a-delegator-of-a"}},[a._v("#")]),a._v(" "),e("code",[a._v("b")]),a._v(" is a delegator of "),e("code",[a._v("a")])]),a._v(" "),e("p",[a._v("Now "),e("code",[a._v("a")]),a._v(" is a validator with 1 SCRT (1000000uscrt) staked."),e("br"),a._v("\nThis is how "),e("code",[a._v("b")]),a._v(" can delegate 0.00001 SCRT to "),e("code",[a._v("a")]),a._v(":")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli tx staking delegate "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmacli keys show a --bech"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("val -a"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" 10uscrt --from b\n")])])]),e("p",[a._v("This is how to see "),e("code",[a._v("b")]),a._v("'s rewards from delegating to "),e("code",[a._v("a")]),a._v(":")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli q distribution rewards "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmacli keys show -a b"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),e("p",[a._v("This is how "),e("code",[a._v("b")]),a._v(" can withdraw its rewards:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli tx distribution withdraw-rewards "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmacli keys show --bech"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("val -a a"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" --from b\n")])])]),e("h2",{attrs:{id:"a-is-a-validator-and-has-b-as-a-delegator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-is-a-validator-and-has-b-as-a-delegator"}},[a._v("#")]),a._v(" "),e("code",[a._v("a")]),a._v(" is a validator and has "),e("code",[a._v("b")]),a._v(" as a delegator")]),a._v(" "),e("p",[e("code",[a._v("a")]),a._v(" was set up as a validator from genesis."),e("br"),a._v("\nThis is how to see "),e("code",[a._v("a")]),a._v("'s rewards from being a validator:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli q distribution rewards "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmacli keys show -a a"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),e("p",[a._v("This is how to see "),e("code",[a._v("a")]),a._v("'s commissions from being a validator:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli q distribution commission "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmacli keys show -a --bech"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("val a"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),e("p",[a._v("This is how "),e("code",[a._v("a")]),a._v(" can withdraw its rewards + its commissions from being a validator:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli tx distribution withdraw-rewards "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmacli keys show --bech"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("val -a a"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" --from a --commission\n")])])]),e("p",[a._v("(To withdraw only rewards omit the "),e("code",[a._v("--commission")]),a._v(")")]),a._v(" "),e("h1",{attrs:{id:"run-a-node-after-genesis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run-a-node-after-genesis"}},[a._v("#")]),a._v(" Run a node (after genesis)")]),a._v(" "),e("p",[a._v("First, init your environment:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmad init "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("moniker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" --chain-id enigma-testnet\n")])])]),e("p",[a._v("Now you need a valid running node to send you their "),e("code",[a._v("genesis.json")]),a._v(" file (usually at "),e("code",[a._v("~/.enigmad/config/genesis.json")]),a._v(")."),e("br"),a._v("\nOnce you have the valid "),e("code",[a._v("genesis.json")]),a._v(", put it in "),e("code",[a._v("~/.enigmad/config/genesis.json")]),a._v(" (overwrite the existing file if needed)."),e("br"),a._v("\nNext, edit your "),e("code",[a._v("~/.enigmad/config/config.toml")]),a._v(", set the "),e("code",[a._v("persistent_peers")]),a._v(":")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("persistent_peers "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[id]@[peer_node_ip]:26656"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# `id` can be aquired from your first peer by running `enigmacli status`")]),a._v("\n")])])]),e("p",[a._v("That's it! Once you're done, just run:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmad start --pruning nothing\n")])])]),e("p",[a._v("You will see your local blockchain replica starting to catch up with your peer's one.")]),a._v(" "),e("p",[a._v("Congrats, you are now up and running!")]),a._v(" "),e("p",[e("strong",[a._v("Note:")]),a._v(" you can also run "),e("code",[a._v("enigmad start --pruning nothing --p2p.persistent_peers [id]@[peer_node_ip]:26656")]),a._v(" instead of editing the conf file."),e("br"),a._v(" "),e("strong",[a._v("Note")]),a._v(": If anything goes wrong, delete the "),e("code",[a._v("~/.enigmad")]),a._v(" and "),e("code",[a._v("~/.enigmacli")]),a._v(" dirs and start again.")]),a._v(" "),e("h1",{attrs:{id:"join-as-a-new-validator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#join-as-a-new-validator"}},[a._v("#")]),a._v(" Join as a new Validator")]),a._v(" "),e("p",[a._v("After you have a private node up and running, run the following command:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli tx staking create-validator "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --amount"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("num of coins"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# This is the amount of coins you put at stake. i.e. 100000uscrt")]),a._v("\n  --pubkey"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("enigmad tendermint show-validator"),e("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --moniker"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<name-of-your-moniker>"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --chain-id"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("chain-id"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --commission-rate"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0.10"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --commission-max-rate"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0.20"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --commission-max-change-rate"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0.01"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --min-self-delegation"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"1"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --gas"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"auto"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --gas-prices"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0.025uscrt"')]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  --from"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name or address"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Name or address of your existing account")]),a._v("\n")])])]),e("p",[a._v("To check if you got added to the validator-set by running:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("enigmacli q tendermint-validator-set\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);