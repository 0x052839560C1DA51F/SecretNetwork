{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{354:function(e,t,a){\"use strict\";a.r(t);var s=a(43),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"contract-development-guide\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#contract-development-guide\"}},[e._v(\"#\")]),e._v(\" Contract Development Guide\")]),e._v(\" \"),a(\"p\",[e._v(\"This repository can be used to get up and running on a local developer testnet (enigmadev) to start working with the cosmwasm-based smart contracts (soon to be secret contracts!).\")]),e._v(\" \"),a(\"p\",[e._v(\"A few important notes:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"smart contracts in this repo are a precursor to Secret Contracts, which enable data privacy\")]),e._v(\" \"),a(\"li\",[e._v(\"smart contracts are written in Rust and based on cosmwasm, and the module is referred to as \"),a(\"code\",[e._v(\"compute\")]),e._v(\" in the Secret Network. This will be also true of Secret Contracts!\")]),e._v(\" \"),a(\"li\",[e._v(\"these cosmwasm-based smart contracts should be reusable and easily modified once we incorporate data privacy\")])]),e._v(\" \"),a(\"h2\",{attrs:{id:\"setup-the-local-developer-testnet\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#setup-the-local-developer-testnet\"}},[e._v(\"#\")]),e._v(\" Setup the Local Developer Testnet\")]),e._v(\" \"),a(\"p\",[e._v(\"The developer blockchain is configured to run inside a docker container. Install \"),a(\"a\",{attrs:{href:\"https://docs.docker.com/install/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Docker\"),a(\"OutboundLink\")],1),e._v(\" for your environment (Mac, Windows, Linux).\")]),e._v(\" \"),a(\"p\",[e._v(\"Open a terminal window and change to your project directory. Then clone the Secret Network repository:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"$ git clone https://github.com/enigmampc/SecretNetwork.git\\n\")])])]),a(\"p\",[e._v(\"Change directory:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"$ cd SecretNetwork\\n\")])])]),a(\"p\",[e._v(\"In the same terminal, create the docker image by issuing the build command and tagging it as \"),a(\"em\",[e._v(\"enigmadev\")]),e._v(\". We'll use that tag later instead of the container id, which can be a bit cryptic and hard to remember.\")]),e._v(\" \"),a(\"p\",[e._v(\"The command below tells Docker to follow the instructions in the Dockerfile_devnet file to build the image.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"# Checkout and build with the compute module enabled, so we can deploy contracts.\\ngit checkout 168d64f5b5bd5b998a171cd24bba5d405e3a8229\\n\\ndocker build -f Dockerfile_devnet -t enigmadev .\\n\")])])]),a(\"p\",[a(\"img\",{attrs:{src:\"docker-build.png\",alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"To verify the \"),a(\"em\",[e._v(\"enigmadev\")]),e._v(\" docker image was created:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"docker image ls enigmadev\\n\")])])]),a(\"p\",[e._v(\"Now that we've created the local SecretNetwork docker image we can run it as a container:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"docker run -d \\\\\\n -p 26657:26657 -p 26656:26656 -p 1317:1317 \\\\\\n --name enigmadev enigmadev\\n\")])])]),a(\"p\",[a(\"strong\",[e._v(\"NOTE\")]),e._v(\": The \"),a(\"em\",[e._v(\"enigmadev\")]),e._v(\" docker container can be stopped by using (in a separate terminal) \"),a(\"code\",[e._v(\"docker stop enigmadev\")]),e._v(\" and re-started\\nusing \"),a(\"code\",[e._v(\"docker start enigmadev\")]),e._v(\".\")]),e._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"docker-run.png\",alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"At this point you're running a local SecretNetwork full-node. Let's connect to the container so we can view and manage the enigma keys:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"docker exec -it enigmadev /bin/bash\\n\")])])]),a(\"p\",[e._v(\"The local blockchain has a couple of keys setup for you (similar to accounts if you're familiar with Truffle Ganache). The keys are stored in the \"),a(\"code\",[e._v(\"test\")]),e._v(\" keyring backend, which makes it easier for local development and testing.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"enigmacli keys list --keyring-backend test\\n\")])])]),a(\"p\",[a(\"img\",{attrs:{src:\"enigmacli-keys-list.png\",alt:\"\"}})]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"exit\")]),e._v(\" when you are done\")]),e._v(\" \"),a(\"p\",[e._v(\"At this point you've:\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[e._v(\"Created the local developer testnet\")])]),e._v(\" \"),a(\"li\",[a(\"p\",[e._v(\"Started the Secret Network\")])]),e._v(\" \"),a(\"li\",[a(\"p\",[e._v(\"Listed the keys/accounts\")])])]),e._v(\" \"),a(\"p\",[e._v(\"This process is similar to the old \"),a(\"code\",[e._v(\"discovery init\")]),e._v(\" and \"),a(\"code\",[e._v(\"discovery start\")]),e._v(\" and may be streamlined in the future.\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"setup-smart-contracts-cosmwasm\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#setup-smart-contracts-cosmwasm\"}},[e._v(\"#\")]),e._v(\" Setup Smart Contracts (cosmwasm)\")]),e._v(\" \"),a(\"p\",[e._v(\"These smart contracts are based on \"),a(\"a\",{attrs:{href:\"https://www.cosmwasm.com\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"CosmWasm\"),a(\"OutboundLink\")],1),e._v(\" which is an implementation on the Cosmos network. The CosmWasm smart contracts are like Ethereum's smart contracts except they can be used on other blockchains using the \"),a(\"a\",{attrs:{href:\"https://cosmos.network/ibc\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Inter Blockchain Protocol\"),a(\"OutboundLink\")],1),e._v(\" (IBC). CosmWasm smart contracts are written in the Rust language.\")]),e._v(\" \"),a(\"p\",[e._v(\"The Secret Network has a \"),a(\"em\",[e._v(\"compute\")]),e._v(\" module that we'll use to store, query and instantiate the smart contract. Once stored on the blockchain the smart contract has to be created (or instantiated) in order to execute its methods. This is similar to doing an Ethereum \"),a(\"code\",[e._v(\"migrate\")]),e._v(\" using truffle which handles the deployment and creation of a smart contract.\")]),e._v(\" \"),a(\"p\",[e._v(\"Eventually the smart contracts will become secret contracts (in a future blockchain upgrade) running in an SGX enclave (Trusted Execution Environment) where computations are performed on the encrypted contract data (i.e. inputs, state).\")]),e._v(\" \"),a(\"p\",[e._v(\"Next we'll walkthrough steps to:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"install Rust (you can check out the Rust book, rustlings course, examples and more at https://www.rust-lang.org/learn)\")]),e._v(\" \"),a(\"li\",[e._v(\"install the Rust dependencies\")]),e._v(\" \"),a(\"li\",[e._v(\"create your first project\")])]),e._v(\" \"),a(\"p\",[e._v(\"The Rust dependencies include the Rust compiler, cargo (\"),a(\"em\",[e._v(\"package manager\")]),e._v(\"), toolchain and a package to generate projects (you can check out the Rust book, rustlings course, examples and more at https://www.rust-lang.org/learn).\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"Install Rust\")])]),e._v(\" \"),a(\"p\",[e._v(\"More information about installing Rust can be found here: https://www.rust-lang.org/tools/install.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\\nsource $HOME/.cargo/env\\n\")])])]),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[e._v(\"Add rustup target wasm32 for both stable and nightly\")])]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"rustup default stable\\nrustup target list --installed\\nrustup target add wasm32-unknown-unknown\\n\\nrustup install nightly\\nrustup target add wasm32-unknown-unknown --toolchain nightly\\n\")])])]),a(\"ol\",{attrs:{start:\"3\"}},[a(\"li\",[e._v(\"If using linux, install the standard build tools:\")])]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"apt install build-essential\\n\")])])]),a(\"ol\",{attrs:{start:\"4\"}},[a(\"li\",[e._v(\"Run cargo install cargo-generate\")])]),e._v(\" \"),a(\"p\",[e._v(\"Cargo generate is the tool you'll use to create a smart contract project (https://doc.rust-lang.org/cargo).\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"cargo install cargo-generate --features vendored-openssl\\n\")])])]),a(\"h2\",{attrs:{id:\"create-initial-smart-contract\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#create-initial-smart-contract\"}},[e._v(\"#\")]),e._v(\" Create Initial Smart Contract\")]),e._v(\" \"),a(\"p\",[e._v(\"To create the smart contract you'll:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"generate the initial project\")]),e._v(\" \"),a(\"li\",[e._v(\"compile the smart contract\")]),e._v(\" \"),a(\"li\",[e._v(\"run unit tests\")]),e._v(\" \"),a(\"li\",[e._v(\"optimize the wasm contract bytecode to prepare for deployment\")]),e._v(\" \"),a(\"li\",[e._v(\"deploy the smart contract to your local SecretNetwork\")]),e._v(\" \"),a(\"li\",[e._v(\"instantiate it with contract parameters\")])]),e._v(\" \"),a(\"p\",[e._v(\"Generate the smart contract project\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"cargo generate --git https://github.com/confio/cosmwasm-template.git --name mysimplecounter\\n\")])])]),a(\"p\",[e._v(\"The git project above is a cosmwasm smart contract template that implements a simple counter. The contract is created with a parameter for the initial count and allows subsequent incrementing.\")]),e._v(\" \"),a(\"p\",[e._v(\"Change directory to the project you created and view the structure and files that were created.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"cd mysimplecounter\\n\")])])]),a(\"p\",[e._v(\"The generate creates a directory with the project name and has this structure:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Cargo.lock\\tDeveloping.md\\tLICENSE\\t\\tPublishing.md\\texamples\\tschema\\t\\ttests\\nCargo.toml\\tImporting.md\\tNOTICE\\t\\tREADME.md\\trustfmt.toml\\tsrc\\n\")])])]),a(\"h2\",{attrs:{id:\"compile\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#compile\"}},[e._v(\"#\")]),e._v(\" Compile\")]),e._v(\" \"),a(\"p\",[e._v(\"Use the following command to compile the smart contract which produces the wasm contract file.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"cargo wasm\\n\")])])]),a(\"h2\",{attrs:{id:\"unit-tests\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#unit-tests\"}},[e._v(\"#\")]),e._v(\" Unit Tests\")]),e._v(\" \"),a(\"p\",[e._v(\"Run unit tests\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"RUST_BACKTRACE=1 cargo unit-test\\n\")])])]),a(\"h2\",{attrs:{id:\"integration-tests\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#integration-tests\"}},[e._v(\"#\")]),e._v(\" Integration Tests\")]),e._v(\" \"),a(\"p\",[e._v(\"The integration tests are under the \"),a(\"code\",[e._v(\"tests/\")]),e._v(\" directory and run as:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"cargo integration-test\\n\")])])]),a(\"h2\",{attrs:{id:\"generate-msg-schemas\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#generate-msg-schemas\"}},[e._v(\"#\")]),e._v(\" Generate Msg Schemas\")]),e._v(\" \"),a(\"p\",[e._v(\"We can also generate JSON Schemas that serve as a guide for anyone trying to use the contract, to specify which arguments they need.\")]),e._v(\" \"),a(\"p\",[e._v(\"Auto-generate msg schemas (when changed):\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"cargo schema\\n\")])])]),a(\"h2\",{attrs:{id:\"deploy-smart-contract\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#deploy-smart-contract\"}},[e._v(\"#\")]),e._v(\" Deploy Smart Contract\")]),e._v(\" \"),a(\"p\",[e._v(\"Before deploying or storing the contract on the testnet, need to run the cosmwasm optimizer.\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"optimize-compiled-wasm\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#optimize-compiled-wasm\"}},[e._v(\"#\")]),e._v(\" Optimize compiled wasm\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"docker run --rm -v $(pwd):/code \\\\\\n  --mount type=volume,source=$(basename $(pwd))_cache,target=/code/target \\\\\\n  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \\\\\\n  confio/cosmwasm-opt:0.7.3\\n\")])])]),a(\"p\",[e._v(\"The contract wasm needs to be optimized to get a smaller footprint. Cosmwasm notes state the contract would be too large for the blockchain unless optimized. This example contract.wasm is 1.8M before optimizing, 90K after.\")]),e._v(\" \"),a(\"p\",[e._v(\"The optimization creates two files:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"contract.wasm\")]),e._v(\" \"),a(\"li\",[e._v(\"hash.txt\")])]),e._v(\" \"),a(\"h3\",{attrs:{id:\"store-the-smart-contract-on-our-local-testnet\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#store-the-smart-contract-on-our-local-testnet\"}},[e._v(\"#\")]),e._v(\" Store the Smart Contract on our local Testnet\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"# First lets start it up again, this time mounting our project's code inside the container.\\ndocker run -d -p 26657:26657 -p 26656:26656 -p 1317:1317 \\\\\\n -v $(pwd):/root/code \\\\\\n --name enigmadev enigmadev\\n\")])])]),a(\"p\",[e._v(\"Upload the optimized contract.wasm to the enigma-testnet:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"docker exec -it enigmadev /bin/bash\\n\\ncd code\\n\\nenigmacli tx compute store contract.wasm --from a --gas auto -y --keyring-backend test\\n\")])])]),a(\"p\",[e._v(\"You can also store \"),a(\"a\",{attrs:{href:\"https://www.cosmwasm.com/docs/tooling/verify\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"verified code\"),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"p\",[e._v(\"Uploading verified code requires 2 additional params, source of the crate, and the builder that optimized the compiled wasm.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('enigmacli tx compute store contract.wasm \\\\\\n--builder=\"confio/cosmwasm-opt:0.7.3\" \\\\\\n--source=\"https://crates.io/api/v1/crates/<your-project-name>/0.0.1/download\" \\\\\\n--from a --gas auto -y\\n')])])]),a(\"h3\",{attrs:{id:\"querying-the-smart-contract-and-code\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#querying-the-smart-contract-and-code\"}},[e._v(\"#\")]),e._v(\" Querying the Smart Contract and Code\")]),e._v(\" \"),a(\"ol\",{attrs:{start:\"12\"}},[a(\"li\",[e._v(\"List current smart contract code\")])]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('enigmacli query compute list-code\\n[\\n  {\\n    \"id\": 1,\\n    \"creator\": \"enigma1klqgym9m7pcvhvgsl8mf0elshyw0qhruy4aqxx\",\\n    \"data_hash\": \"0C667E20BA2891536AF97802E4698BD536D9C7AB36702379C43D360AD3E40A14\",\\n    \"source\": \"\",\\n    \"builder\": \"\"\\n  }\\n]\\n')])])]),a(\"h3\",{attrs:{id:\"instantiate-the-smart-contract\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#instantiate-the-smart-contract\"}},[e._v(\"#\")]),e._v(\" Instantiate the Smart Contract\")]),e._v(\" \"),a(\"p\",[e._v(\"At this point the contract's been uploaded and stored on the testnet, but there's no \\\"instance.\\\"\\nThis is like \"),a(\"code\",[e._v(\"discovery migrate\")]),e._v(\" which handles both the deploying and creation of the contract instance, except in Cosmos the deploy-execute process consists of 3 steps rather than 2 in Ethereum. You can read more about the logic behind this decision, and other comparisons to Solidity, in the \"),a(\"a\",{attrs:{href:\"https://www.cosmwasm.com/docs/getting-started/smart-contracts\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"cosmwasm documentation\"),a(\"OutboundLink\")],1),e._v(\". These steps are:\")]),e._v(\" \"),a(\"ol\",[a(\"li\",[e._v(\"Upload Code - Upload some optimized wasm code, no state nor contract address (example Standard ERC20 contract)\")]),e._v(\" \"),a(\"li\",[e._v(\"Instantiate Contract - Instantiate a code reference with some initial state, creates new address (example set token name, max issuance, etc for my ERC20 token)\")]),e._v(\" \"),a(\"li\",[e._v(\"Execute Contract - This may support many different calls, but they are all unprivileged usage of a previously instantiated contract, depends on the contract design (example: Send ERC20 token, grant approval to other contract)\")])]),e._v(\" \"),a(\"p\",[e._v(\"To create an instance of this project we must also provide some JSON input data, a starting count.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[e._v(\"INIT\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v('\"{'),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[e._v('\\\\\"')]),e._v(\"count\"),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[e._v('\\\\\"')]),e._v(': 100000000}\"')]),e._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[e._v(\"CODE_ID\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"1\")]),e._v(\"\\nenigmacli tx compute instantiate \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e._v(\"$CODE_ID\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v('\"'),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e._v(\"$INIT\")]),e._v('\"')]),e._v(\" --from a --label \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v('\"my counter\"')]),e._v(\" -y --keyring-backend \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[e._v(\"test\")]),e._v(\"\\n\")])])]),a(\"p\",[e._v(\"With the contract now initialized, we can find its address\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[e._v(\"enigmacli query compute list-contract-by-code \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"1\")]),e._v(\"\\n\")])])]),a(\"p\",[e._v(\"Our instance is enigma18vd8fpwxzck93qlwghaj6arh4p7c5n89d2p9uk\")]),e._v(\" \"),a(\"p\",[e._v(\"We can query the contract state\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[e._v(\"CONTRACT\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"=\")]),e._v(\"enigma18vd8fpwxzck93qlwghaj6arh4p7c5n89d2p9uk\\nenigmacli query compute contract-state smart \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e._v(\"$CONTRACT\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v('\"{'),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[e._v('\\\\\"')]),e._v(\"get_count\"),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[e._v('\\\\\"')]),e._v(': {}}\"')]),e._v(\"\\n\")])])]),a(\"p\",[e._v(\"And we can increment our counter\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[e._v(\"enigmacli tx compute execute \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e._v(\"$CONTRACT\")]),e._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[e._v('\"{'),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[e._v('\\\\\"')]),e._v(\"increment\"),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[e._v('\\\\\"')]),e._v(': {}}\"')]),e._v(\" --from a --keyring-backend \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[e._v(\"test\")]),e._v(\"\\n\")])])]),a(\"h2\",{attrs:{id:\"smart-contract\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#smart-contract\"}},[e._v(\"#\")]),e._v(\" Smart Contract\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"project-structure\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#project-structure\"}},[e._v(\"#\")]),e._v(\" Project Structure\")]),e._v(\" \"),a(\"p\",[e._v(\"The source directory (\"),a(\"code\",[e._v(\"src/\")]),e._v(\") has these files:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"contract.rs  lib.rs  msg.rs  state.rs\\n\")])])]),a(\"p\",[e._v(\"The \"),a(\"code\",[e._v(\"contract.rs\")]),e._v(\" file is the one that developers modify, though I found smart contract-specific code in \"),a(\"code\",[e._v(\"state.rs\")]),e._v(\" and \"),a(\"code\",[e._v(\"msg.rs\")]),e._v(\". My understanding is that the developer will modify \"),a(\"code\",[e._v(\"contract.rs\")]),e._v(\" for the logic, \"),a(\"code\",[e._v(\"state.rs\")]),e._v(\" for the data the contract will use as state, and  \"),a(\"code\",[e._v(\"msg.rs\")]),e._v(\" to define the messages handled by the contract.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"state.rs\\nmsg.rs\\n\")])])]),a(\"p\",[e._v(\"The \"),a(\"code\",[e._v(\"msg.rs\")]),e._v(\" file is where the InitMsg parameters are specified (like a constructor), the types of Query (GetCount) and Handle[r] (Increment) messages, and any custom structs for each query response.\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('use schemars::JsonSchema;\\nuse serde::{Deserialize, Serialize};\\n\\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\\npub struct InitMsg {\\n    pub count: i32,\\n}\\n\\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\\n#[serde(rename_all = \"lowercase\")]\\npub enum HandleMsg {\\n    Increment {},\\n    Reset { count: i32 },\\n}\\n\\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\\n#[serde(rename_all = \"lowercase\")]\\npub enum QueryMsg {\\n    // GetCount returns the current count as a json-encoded number\\n    GetCount {},\\n}\\n\\n// We define a custom struct for each query response\\n#[derive(Serialize, Deserialize, Clone, Debug, PartialEq, JsonSchema)]\\npub struct CountResponse {\\n    pub count: i32,\\n}\\n\\n')])])]),a(\"h3\",{attrs:{id:\"unit-tests-2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#unit-tests-2\"}},[e._v(\"#\")]),e._v(\" Unit Tests\")]),e._v(\" \"),a(\"p\",[e._v(\"Unit tests are coded in the \"),a(\"code\",[e._v(\"contract.rs\")]),e._v(\" file itself:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('#[cfg(test)]\\nmod tests {\\n    use super::*;\\n    use cosmwasm::errors::Error;\\n    use cosmwasm::mock::{dependencies, mock_env};\\n    use cosmwasm::serde::from_slice;\\n    use cosmwasm::types::coin;\\n\\n    #[test]\\n    fn proper_initialization() {\\n        let mut deps = dependencies(20);\\n\\n        let msg = InitMsg { count: 17 };\\n        let env = mock_env(&deps.api, \"creator\", &coin(\"1000\", \"earth\"), &[]);\\n\\n        // we can just call .unwrap() to assert this was a success\\n        let res = init(&mut deps, env, msg).unwrap();\\n        assert_eq!(0, res.messages.len());\\n\\n        // it worked, let\\'s query the state\\n        let res = query(&deps, QueryMsg::GetCount {}).unwrap();\\n        let value: CountResponse = from_slice(&res).unwrap();\\n        assert_eq!(17, value.count);\\n    }\\n')])])]),a(\"h2\",{attrs:{id:\"resources\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#resources\"}},[e._v(\"#\")]),e._v(\" Resources\")]),e._v(\" \"),a(\"p\",[e._v(\"Smart Contracts on the Secret Network use cosmwasm. Therefore, for troubleshooting and additional context, cosmwasm documentation may be very useful. Here are some of the links we relied on in putting together this guide:\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"https://github.com/CosmWasm/cosmwasm\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"cosmwasm repo\"),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://github.com/CosmWasm/cosmwasm-template\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"cosmwasm starter pack - project template\"),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.cosmwasm.com/docs/getting-started/using-the-sdk\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v('Setting up a local \"testnet\"'),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://www.cosmwasm.com/docs/intro/overview\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"cosmwasm docs\"),a(\"OutboundLink\")],1)])]),e._v(\" \"),a(\"h1\",{attrs:{id:\"what-s-next\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#what-s-next\"}},[e._v(\"#\")]),e._v(\" What's next?\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"RouterLink\",{attrs:{to:\"/dev/cosmwasm-js.html\"}},[e._v(\"CosmWasm JS\")])],1),e._v(\" \"),a(\"li\",[a(\"RouterLink\",{attrs:{to:\"/dev/frontend.html\"}},[e._v(\"Frontend development\")])],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}